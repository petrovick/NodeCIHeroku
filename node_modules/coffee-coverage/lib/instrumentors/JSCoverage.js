// Generated by CoffeeScript 1.7.1
(function() {
  var JSCoverage, fileToLines, generateUniqueName, getRelativeFilename, path, stripLeadingDotOrSlash, toQuotedString, _, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  _ = require('lodash');

  _ref = require('../utils/helpers'), toQuotedString = _ref.toQuotedString, stripLeadingDotOrSlash = _ref.stripLeadingDotOrSlash, getRelativeFilename = _ref.getRelativeFilename;

  fileToLines = require('../utils/codeUtils').fileToLines;

  generateUniqueName = function(usedNames, desiredName) {
    var answer, suffix;
    answer = "";
    suffix = 1;
    while (true) {
      answer = desiredName + " (" + suffix + ")";
      if (!(__indexOf.call(usedNames, answer) >= 0)) {
        break;
      }
      suffix++;
    }
    return answer;
  };

  module.exports = JSCoverage = (function() {
    JSCoverage.getDefaultOptions = function() {
      return {
        path: 'bare',
        usedFileNameMap: {},
        coverageVar: '_$jscoverage'
      };
    };

    function JSCoverage(fileName, source, options) {
      var relativeFileName, _ref1;
      this.fileName = fileName;
      this.source = source;
      if (options == null) {
        options = {};
      }
      this.log = options.log, this.coverageVar = options.coverageVar;
      options = _.defaults({}, options, JSCoverage.getDefaultOptions());
      this.instrumentedLines = [];
      relativeFileName = getRelativeFilename(options.basePath, this.fileName);
      this.shortFileName = ((_ref1 = options.usedFileNameMap) != null ? _ref1[this.fileName] : void 0) || (function(_this) {
        return function() {
          var shortFileName, usedFileNames;
          shortFileName = (function() {
            switch (options.path) {
              case 'relative':
                return stripLeadingDotOrSlash(relativeFileName);
              case 'abbr':
                return this._abbreviatedPath(stripLeadingDotOrSlash(relativeFileName));
              default:
                return path.basename(relativeFileName);
            }
          }).call(_this);
          if (options.usedFileNames != null) {
            if (__indexOf.call(options.usedFileNames, shortFileName) >= 0) {
              shortFileName = generateUniqueName(options.usedFileNames, shortFileName);
            }
            options.usedFileNames.push(shortFileName);
          } else if (options.usedFileNameMap != null) {
            usedFileNames = _.values(options.usedFileNameMap);
            if (__indexOf.call(usedFileNames, shortFileName) >= 0) {
              shortFileName = generateUniqueName(usedFileNames, shortFileName);
            }
            options.usedFileNameMap[_this.fileName] = shortFileName;
          }
          return shortFileName;
        };
      })(this)();
      this.quotedFileName = toQuotedString(this.shortFileName);
    }

    JSCoverage.prototype._abbreviatedPath = function(pathName) {
      var answer, filename, needTrailingSlash, pathElement, splitPath, _i, _len;
      needTrailingSlash = false;
      splitPath = pathName.split(path.sep);
      if (splitPath.slice(-1)[0] === '') {
        needTrailingSlash = true;
        splitPath.pop();
      }
      filename = splitPath.pop();
      answer = "";
      for (_i = 0, _len = splitPath.length; _i < _len; _i++) {
        pathElement = splitPath[_i];
        if (pathElement.length === 0) {
          answer += "";
        } else if (pathElement === "..") {
          answer += pathElement;
        } else if (_.startsWith(pathElement, ".")) {
          answer += pathElement.slice(0, 2);
        } else {
          answer += pathElement[0];
        }
        answer += path.sep;
      }
      answer += filename;
      if (needTrailingSlash) {
        answer += path.sep;
      }
      return answer;
    };

    JSCoverage.prototype.visitStatement = function(node) {
      var line, _ref1, _ref2, _ref3;
      if ((_ref1 = node.node.coffeeCoverage) != null ? _ref1.skip : void 0) {
        return;
      }
      line = node.locationData.first_line + 1;
      if (__indexOf.call(this.instrumentedLines, line) >= 0) {
        return (_ref2 = this.log) != null ? typeof _ref2.debug === "function" ? _ref2.debug("Skipping   " + (node.toString())) : void 0 : void 0;
      } else {
        if ((_ref3 = this.log) != null) {
          if (typeof _ref3.debug === "function") {
            _ref3.debug("Instrumenting " + (node.toString()));
          }
        }
        this.instrumentedLines.push(line);
        return node.insertBefore("" + this.coverageVar + "[" + this.quotedFileName + "][" + line + "]++");
      }
    };

    JSCoverage.prototype.visitIf = function(node) {
      var _ref1;
      if (node.node.isChain) {
        if ((_ref1 = this.log) != null) {
          if (typeof _ref1.debug === "function") {
            _ref1.debug("  Disabling chaining for if statement");
          }
        }
        return node.node.isChain = false;
      }
    };

    JSCoverage.prototype.getInitString = function() {
      var fileToInstrumentLines, index, init, line, lineNumber, _i, _j, _len, _len1, _ref1;
      init = "if (typeof " + this.coverageVar + " === 'undefined') " + this.coverageVar + " = {};\n(function(_export) {\n    if (typeof _export." + this.coverageVar + " === 'undefined') {\n        _export." + this.coverageVar + " = " + this.coverageVar + ";\n    }\n})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);\nif (! " + this.coverageVar + "[" + this.quotedFileName + "]) {\n    " + this.coverageVar + "[" + this.quotedFileName + "] = [];\n";
      _ref1 = this.instrumentedLines;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        lineNumber = _ref1[_i];
        init += "    " + this.coverageVar + "[" + this.quotedFileName + "][" + lineNumber + "] = 0;\n";
      }
      init += "}\n\n";
      init += "" + this.coverageVar + "[" + this.quotedFileName + "].source = [";
      fileToInstrumentLines = fileToLines(this.source);
      for (index = _j = 0, _len1 = fileToInstrumentLines.length; _j < _len1; index = ++_j) {
        line = fileToInstrumentLines[index];
        if (!!index) {
          init += ", ";
        }
        init += toQuotedString(line);
      }
      return init += "];\n\n";
    };

    JSCoverage.prototype.getInstrumentedLineCount = function() {
      return this.instrumentedLines.length;
    };

    return JSCoverage;

  })();

}).call(this);
